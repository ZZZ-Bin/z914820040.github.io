{"name":"CSS预处理器,Less,Sass,Stylus","slug":"CSS预处理器-Less-Sass-Stylus","count":1,"postlist":[{"title":"Less、Sass与Stylus浅谈","slug":"Less、Sass与Stylus浅谈","date":"2018-01-21T06:32:57.000Z","updated":"2018-01-21T13:20:36.261Z","comments":true,"path":"api/articles/Less、Sass与Stylus浅谈.json","excerpt":"","keywords":null,"cover":null,"content":"<h4 id=\"什么是CSS预处理器？\"><a href=\"#什么是CSS预处理器？\" class=\"headerlink\" title=\"什么是CSS预处理器？\"></a>什么是CSS预处理器？</h4><p>CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，并且解决了传统CSS编写时遇到的难以解决的问题，如：</p>\n<ul>\n<li>语法不够强大，无法嵌套书写导致复写很多内容</li>\n<li>没有变量，逻辑上相关的属性需要重复书写，导致难以维护</li>\n</ul>\n<p>现阶段主流CSS预处理器 Less、Sass、Stylus 都提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性，但其之中也略有不同，下面将通过几个方面来浅谈各预处理器之前的差异及优缺点。</p>\n<h4 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h4><ul>\n<li><strong>SASS</strong>，2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS。</li>\n<li><strong>LESS</strong>，2009年出现，受SASS的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手，在ruby社区之外支持者远超过SASS，其缺点是比起SASS来，可编程功能不够，不过优点是简单和兼容CSS，反过来也影响了SASS演变到了SCSS的时代，著名的Twitter Bootstrap就是采用LESS做底层语言的。</li>\n<li><strong>Stylus</strong>，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如SASS和LESS。</li>\n</ul>\n<h4 id=\"基本语法方面\"><a href=\"#基本语法方面\" class=\"headerlink\" title=\"基本语法方面\"></a>基本语法方面</h4><p>Less 的基本语法属于「CSS 风格」，而 Sass、Stylus 相比之下激进一些，利用缩进、空格和换行来减少需要输入的字符。不过区别在于 Sass、Stylus 同时也兼容「CSS 风格」代码。多一种选择在更灵活的同时，在团队开发中也免不了增加更多约定来保持风格统一。而对个人而言，语法风格按自己口味选择即可。</p>\n<p>Less &amp; SCSS：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sass：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box</span><br><span class=\"line\">  display: block</span><br></pre></td></tr></table></figure>\n<p>Stylus：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box</span><br><span class=\"line\">  display: block</span><br></pre></td></tr></table></figure>\n<h4 id=\"嵌套语法\"><a href=\"#嵌套语法\" class=\"headerlink\" title=\"嵌套语法\"></a>嵌套语法</h4><p>三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 <code>&amp;</code> 也相同。区别只是 Sass 和 Stylus 可以用没有大括号的方式书写。</p>\n<p>&amp; 引用上层选择器</p>\n<p>&amp;对伪类的使用 — hover或 focus<br>&amp;对连接的使用— &amp;_nav</p>\n<p>以 Less 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.a &#123;</span><br><span class=\"line\">  &amp;.b &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的 CSS 为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.a.b &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量无疑为 CSS 增加了一种有效的复用方式，减少了原来在 CSS 中无法避免的重复「硬编码」。</p>\n<p>Less：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@red: #c00;</span><br><span class=\"line\"></span><br><span class=\"line\">strong &#123;</span><br><span class=\"line\">  color: @red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sass：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$red: #c00;</span><br><span class=\"line\"></span><br><span class=\"line\">strong &#123;</span><br><span class=\"line\">  color: $red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Stylus：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">red = #c00</span><br><span class=\"line\"></span><br><span class=\"line\">strong</span><br><span class=\"line\">  color: red</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h4><p>三种预处理器的变量作用域都是按嵌套的规则集划分，并且在当前规则集下找不到对应变量时会逐级向上查找，注意这个和原生 CSS 的逻辑是<em>完全不同</em>的。</p>\n<p>如果我们在代码中重写某个已经定义的变量的值，Less 的处理逻辑和其他两者有非常<strong>关键</strong>的区别。在 Less 中，这个行为被称为「<a href=\"https://www.baidu.com/link?url=C3D2z25-ecx8rKr8Mm2OrvL5yO35VsogU4cFS-7pX8a0GZ2Fo0DsoVg2BXo8lO62rB9T3RlFyR8bR4CXcZFHT23YWs0pQPfW9rX_qSu9OxPj_bJO-bpgnc5K0vXZX8rD&amp;wd=&amp;eqid=ec58df800001fbbb000000025a64588d\" target=\"_blank\" rel=\"noopener\">懒加载（Lazy Loading）</a>」。所有 Less 变量的计算，都是以这个变量最后一次被定义的值为准。（所以还是老老实实的用闭包的思想限定其作用域吧 -_- |||）</p>\n<h4 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"@arguments\"></a>@arguments</h4><p>@arguments包含了所有传递进来的参数。<br>如果你不想单独处理每一个参数的话就可以像这样写<br><strong>原来的办法传参</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.border_arg(@w:30px,@c:red,@xx:solid)&#123;</span><br><span class=\"line\">  border: @w @c @xx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>现在的利用argguments</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.border_arg(@w:30px,@c:red,@xx:solid)&#123;</span><br><span class=\"line\">  border: @arguments;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test_arguments&#123;</span><br><span class=\"line\">  .border_arg();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test_arguments_2&#123;</span><br><span class=\"line\">  .border_arg(40px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"避免编译\"><a href=\"#避免编译\" class=\"headerlink\" title=\"避免编译\"></a>避免编译</h4><p>有的时候我们需要输出一些不正确的CSS语法或者使用一些LESS不认识的专有语法<br><strong>要输出这样的值我们可以在字符串前加上一个  ~</strong></p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:~’calc(100% - 30px)’;</span><br><span class=\"line\">.test_03&#123;</span><br><span class=\"line\">  width: calc(300px - 20px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test_04&#123;</span><br><span class=\"line\">  width: ~&apos;calc(300px - 20px)&apos;; //想不让less算，让浏览器算  用在calc 或者滤镜</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"引入外部的文件-一些库或公共的\"><a href=\"#引入外部的文件-一些库或公共的\" class=\"headerlink\" title=\"引入外部的文件(一些库或公共的)\"></a>引入外部的文件(一些库或公共的)</h4><p><strong>.less文件引入</strong><br><code>@import &quot;base&quot;;</code> 默认后缀名是.less所以不用写<br><strong>.css文件引入`</strong><code></code>@import(less) “a.css”;` //注意(less)有空格，貌似我没用出来有待研究</p>\n<p><strong>三种预处理器，个人更加倾向于 Stylus，其相较 其他两者 来说，变量更易保持 ‘清洁’，且更加灵活的支持 「CSS 风格」，可选择性的使用何种方式编写样式，更有效的提高代码的可读性、可维护性，也有利于团队合作。</strong></p>\n","text":"什么是CSS预处理器？CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，并且解决了传统CSS编写时遇到的难以解决的问题，如：语法不够强大，无法嵌套书写导致复写很多内容没有变量，逻辑上相关的属性需要重复书写","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSS预处理器,Less,Sass,Stylus","slug":"CSS预处理器-Less-Sass-Stylus","count":1,"path":"api/tags/CSS预处理器-Less-Sass-Stylus.json"}]}]}