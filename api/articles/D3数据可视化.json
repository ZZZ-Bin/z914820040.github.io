{"title":"D3数据可视化","slug":"D3数据可视化","date":"2018-02-05T01:16:29.000Z","updated":"2018-02-05T01:51:42.872Z","comments":true,"path":"api/articles/D3数据可视化.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h3 id=\"D3-js是什么\"><a href=\"#D3-js是什么\" class=\"headerlink\" title=\"D3.js是什么\"></a>D3.js是什么</h3><p>D3是指数据驱动文档（Data-Driven Documents），官方定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。</span><br></pre></td></tr></table></figure>\n<h3 id=\"D3-js开发数据可视化，性能方面和highcharts-echarts对比区别\"><a href=\"#D3-js开发数据可视化，性能方面和highcharts-echarts对比区别\" class=\"headerlink\" title=\"D3.js开发数据可视化，性能方面和highcharts,echarts对比区别\"></a>D3.js开发数据可视化，性能方面和highcharts,echarts对比区别</h3><p>Highcharts和echarts是一类东西，但跟d3.js维度不同。假如前面两个能解决你的需求，那么就可以先不考虑d3。</p>\n<p>Highcharts和echarts基本上就是画图表用的，d3.js更自由一些，你很容易去做出自己想要的效果，比如mind chart、heat chart、tile chart之类的东西</p>\n<p>而性能方面，简单图表都没什么问题，数据量大、复杂运算、动画效果多的话，都快不了，区别就是svg性能更差，canvas能好不少罢了。</p>\n<h3 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h3><p>本文绘制一个横向的柱形图。只绘制矩形，不绘制文字和坐标轴。</p>\n<p>在 SVG 中，矩形的元素标签是 rect。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg&gt;</span><br><span class=\"line\">&lt;rect&gt;&lt;/rect&gt;</span><br><span class=\"line\">&lt;rect&gt;&lt;/rect&gt;</span><br><span class=\"line\">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的 rect 里没有矩形的属性。矩形的属性，常用的有四个：</p>\n<ul>\n<li><strong>x</strong> - 矩形左上角的 x 坐标</li>\n<li><strong>y</strong> - 矩形左上角的 y 坐标</li>\n<li><strong>width</strong> - 矩形的宽度</li>\n<li><strong>height</strong> - 矩形的高度</li>\n</ul>\n<p>要注意，在 SVG 中，x 轴的正方向是水平向右，y 轴的正方向是垂直向下的。</p>\n<p>现在给出一组数据，要对此进行可视化。数据如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dataset = [ 250 , 210 , 170 , 130 , 90 ];  //数据（表示矩形的宽度）</span><br></pre></td></tr></table></figure>\n<p>为简单起见，我们直接用数值的大小来表示矩形的像素宽度（后面会说到这不是一种好方法）。然后，添加以下代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rectHeight = 25;   //每个矩形所占的像素高度(包括空白)</span><br><span class=\"line\"></span><br><span class=\"line\">svg.selectAll(&quot;rect&quot;)</span><br><span class=\"line\">    .data(dataset)</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(&quot;rect&quot;)</span><br><span class=\"line\">    .attr(&quot;x&quot;,20)</span><br><span class=\"line\">    .attr(&quot;y&quot;,function(d,i)&#123;</span><br><span class=\"line\">         return i * rectHeight;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .attr(&quot;width&quot;,function(d)&#123;</span><br><span class=\"line\">         return d;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .attr(&quot;height&quot;,rectHeight-2)</span><br><span class=\"line\">    .attr(&quot;fill&quot;,&quot;steelblue&quot;);</span><br></pre></td></tr></table></figure>\n<p>这段代码添加了与 dataset 数组的长度相同数量的矩形，所使用的语句是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svg.selectAll(&quot;rect&quot;)   //选择svg内所有的矩形</span><br><span class=\"line\">    .data(dataset)  //绑定数组</span><br><span class=\"line\">    .enter()        //指定选择集的enter部分</span><br><span class=\"line\">    .append(&quot;rect&quot;) //添加足够数量的矩形元素</span><br></pre></td></tr></table></figure>\n<p>这段代码以后会常常出现在 D3 的代码中，请务必牢记。目前不深入讨论它的作用机制是怎样的，只需要读者牢记，当：</p>\n<p>有数据，而没有足够图形元素的时候，使用此方法可以添加足够的元素。</p>\n<p>添加了元素之后，就需要分别给各元素的属性赋值。在这里用到了 function(d, i)，前面已经讲过，d 代表与当前元素绑定的数据，i 代表索引号。给属性赋值的时候，是需要用到被绑定的数据，以及索引号的。</p>\n<p>最后一行的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.attr(&quot;fill&quot;,&quot;steelblue&quot;);</span><br></pre></td></tr></table></figure>\n<p>是给矩形元素设置颜色。一般来说，最好写成外置 CSS 的形式，方便归类和修改。这里为了便于初学者理解，将样式直接写到元素里。</p>\n","categories":[],"tags":[]}