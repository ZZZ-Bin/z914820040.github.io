{"title":"JavaScript中字面量、String()与new String()的差异","slug":"JavaScript-中字面量、String-与-new-String-的差异","date":"2018-03-27T13:13:59.000Z","updated":"2018-03-28T11:42:27.103Z","comments":true,"path":"api/articles/JavaScript-中字面量、String-与-new-String-的差异.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>我们知道在 JavaScript 中数据存储类型分为两种，即值类型和引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(str1)); <span class=\"comment\">//String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"built_in\">String</span>(<span class=\"string\">'string'</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(str2)); <span class=\"comment\">//String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'string'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(str2)); <span class=\"comment\">//Object</span></span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​    从上述代码中我们可以看出两种形式定义的字符串类型上的不同，字面量和 <code>String()</code> 定义的字符串类型为 <code>String</code> ，为值类型，存储在内存的栈中。而通过类定义的字符串类型为 <code>Object</code> ，为引用类型，存储在内存的堆中。</p>\n<p>​    单独 <code>String(&#39;segmentfault&#39;)</code> 其实并不是面向对象形式的写法，你只能把它看做是一个 <code>String</code> 函数，其返回的就是 <code>&#39;segmentfault&#39;</code> 本身，所以和第一种结果一致。而通过类的实例化<code>new String()</code>定义的字符串，其类型自然是<code>Object</code></p>\n<p>那么问题来了，我们平时为何依然能对前两种方法创建的字符串调用各种方法或查看属性呢？<br>ES规范是这样规定的：（以下内容转述自知乎问答的回答中）</p>\n<blockquote>\n<p>JS运行时首先会调用<code>CheckObjectCoercible(baseValue)</code>这样一个方法，在<code>CheckObjectCoercible</code>方法中会经行<code>ToObject</code>运算。<br>而ES规范对<code>ToObject</code>中对String的运算描述原文如下：</p>\n<p>Create a new String object whose [[PrimitiveValue]] internal property is set to the value of the argument.</p>\n<p>即创建了一个新对象，并将原文字符串的内容赋值给了这个对象的原始值。</p>\n</blockquote>\n<p>字面量表示和<code>String()</code>并没有调用该函数。</p>\n<p>那么通过这两种方法定义的字符串为什么可以调用<code>String</code>对象的诸多方法呢？</p>\n<blockquote>\n<p>引用来自于JS API文档的说明：<br>通过’’或“”包裹的字符串或不作为构造函数调用String函数创建的字符串都是基本类型的字符串而非对象<br>也就是typeof返回的是string 而非 object。而当基本类型的字符串调用String对象的方法时，JS引擎会自动将其包装成一个String对象</p>\n</blockquote>\n","categories":[],"tags":[{"name":"字面量、String()、new String()","slug":"字面量、String-、new-String","count":1,"path":"api/tags/字面量、String-、new-String.json"}]}